#!/usr/bin/env python3

from dataclasses import dataclass

import yaml


@dataclass
class Entry:
    short_name: str
    name: str = None
    url: str = None
    github_org: str = 'theforeman'
    installer: bool = True

    def __post_init__(self):
        if not self.url:
            self.url = f'https://github.com/{self.github_org}/{self.name}'

    @property
    def message(self):
        msg = f'* [{self.short_name}]({self.url})'
        if not self.installer:
            msg += ' (no installer)'
        return msg


class PuppetModule(Entry): # pylint: disable=too-few-public-methods
    def __post_init__(self):
        if not self.name:
            self.name = f'puppet-{self.short_name}'
        super().__post_init__()


class ForemanPlugin(Entry): # pylint: disable=too-few-public-methods
    def __post_init__(self):
        if not self.name:
            self.name = f'foreman_{self.short_name}'
        super().__post_init__()


class SmartProxyPlugin(Entry): # pylint: disable=too-few-public-methods
    def __post_init__(self):
        if not self.name:
            self.name = f'smart_proxy_{self.short_name}'
        super().__post_init__()


def main():
    with open('config.yaml', encoding='UTF-8') as f: # pylint: disable=invalid-name
        data = yaml.safe_load(f)


    print('# Foreman')
    print('## Plugins')
    for plugin_id, plugin in data['foreman']['plugins'].items():
        foreman_plugin = ForemanPlugin(short_name=plugin_id, **(plugin or {}))
        print(foreman_plugin.message)

    print('# Smart Proxy')

    print('## Modules')
    for module_id, module in data['smart_proxy']['modules'].items():
        smart_proxy_module = SmartProxyPlugin(short_name=module_id, **(module or {}))
        print(smart_proxy_module.message)

    print('## Providers')
    for provider_id, provider in data['smart_proxy']['providers'].items():
        smart_proxy_provider = SmartProxyPlugin(short_name=provider_id, **(provider or {}))
        print(smart_proxy_provider.message)

    print('# Installer')
    print('## Modules')
    for module_id, module in data['installer']['modules'].items():
        puppet_module = PuppetModule(short_name=module_id, **(module or {}))
        print(puppet_module.message)


if __name__ == '__main__':
    main()
