#!/usr/bin/env python3

from dataclasses import dataclass
from typing import Optional

import yaml

# OS-specific packages use this path
DEBIAN_RELEASE = 'bullseye'
PACKAGING_URL = 'https://github.com/theforeman/foreman-packaging'


@dataclass
class Entry:
    short_name: str
    name: str = None
    url: str = None
    github_org: str = 'theforeman'
    installer: bool = True

    def __post_init__(self):
        if not self.url:
            self.url = f'https://github.com/{self.github_org}/{self.name}'

    @property
    def message(self):
        return f'| [{self.short_name}]({self.url}) | {"✅" if self.installer else "❌"} |'

    @staticmethod
    def column(label, url):
        if url:
            return f' [{label}]({url}) |'
        return '— |'


class PuppetModule(Entry): # pylint: disable=too-few-public-methods
    def __post_init__(self):
        if not self.name:
            self.name = f'puppet-{self.short_name}'
        super().__post_init__()


@dataclass
class PackagedEntry(Entry):
    rpm: Optional[str] = None
    rpm_directory: str = 'plugins'
    deb: Optional[str] = None
    puppet_acceptance_tests: Optional[str] = None
    translations: Optional[str] = None

    def __post_init__(self):
        super().__post_init__()

        if self.rpm is True:
            self.rpm = f'rubygem-{self.name}'
        if self.deb is True:
            self.deb = f'ruby-{self.name.replace("_", "-")}'

        if self.translations is True:
            self.translations = f'https://www.transifex.com/foreman/foreman/{self.name}/'

    @property
    def rpm_url(self):
        if not self.rpm:
            return None
        return f'{PACKAGING_URL}/tree/rpm/develop/packages/{self.rpm_directory}/{self.rpm}'

    @property
    def deb_url(self):
        if not self.deb:
            return None
        return f'{PACKAGING_URL}/tree/deb/develop/plugins/{self.deb}'

    @property
    def puppet_module(self):
        return None  # implemented by a subclass

    @property
    def puppet_acceptance_tests_url(self):
        if not self.puppet_acceptance_tests:
            return None
        return f'https://github.com/theforeman/{self.puppet_module}/tree/master/spec/acceptance/{self.puppet_acceptance_tests}_spec.rb'  # pylint: disable=line-too-long

    @property
    def message(self):
        return ''.join([
            super().message,
            self.column('i18n', self.translations),
            self.column('RPM', self.rpm_url),
            self.column('deb', self.deb_url),
            self.column('acceptance', self.puppet_acceptance_tests_url),
        ])


class ForemanPlugin(PackagedEntry):
    def __post_init__(self):
        if not self.name:
            self.name = f'foreman_{self.short_name}'
        super().__post_init__()

    @property
    def puppet_module(self):
        return 'puppet-foreman'


class SmartProxyPlugin(PackagedEntry): # pylint: disable=too-few-public-methods
    def __post_init__(self):
        if not self.name:
            self.name = f'smart_proxy_{self.short_name}'
        if self.deb is True:
            self.deb = self.name.replace("-", "_")
        if self.puppet_acceptance_tests is True:
            self.puppet_acceptance_tests = self.short_name
        super().__post_init__()

    @property
    def puppet_module(self):
        return 'puppet-foreman_proxy'

class HammerPlugin(PackagedEntry):
    def __post_init__(self):
        if not self.name:
            self.name = f'hammer_cli_{self.short_name}'
        if not self.url:
            # A lot of repos use dashes, unlike the gem name
            self.url = f'https://github.com/{self.github_org}/hammer-cli-{self.short_name.replace("_", "-")}'
        if self.deb is True:
            self.deb = self.name.replace("-", "_")
        if self.puppet_acceptance_tests is None:
            self.puppet_acceptance_tests = True
        super().__post_init__()

    @property
    def deb_url(self):
        return f'{PACKAGING_URL}/tree/deb/develop/dependencies/{DEBIAN_RELEASE}/{self.deb}'

    @property
    def puppet_module(self):
        return 'puppet-foreman'

    @property
    def puppet_acceptance_tests_url(self):
        return f'https://github.com/theforeman/{self.puppet_module}/tree/master/spec/acceptance/foreman_cli_plugins_spec.rb'  # pylint: disable=line-too-long


def main():
    with open('config.yaml', encoding='UTF-8') as f: # pylint: disable=invalid-name
        data = yaml.safe_load(f)

    print('# [CLI](https://github.com/theforeman/hammer-cli)')
    print('## Plugins')
    print('| Name | Installer | i18n | RPM | deb | Acceptance |')
    print('|-|-|-|-|-|-|')
    for plugin_id, plugin in data['cli']['plugins'].items():
        hammer_plugin = HammerPlugin(short_name=plugin_id, **(plugin or {}))
        print(hammer_plugin.message)
    print()

    print('# [Foreman](https://github.com/theforeman/foreman)')
    print('## Plugins')
    print('| Name | Installer | i18n | RPM | deb | Acceptance |')
    print('|-|-|-|-|-|-|')
    for plugin_id, plugin in data['foreman']['plugins'].items():
        foreman_plugin = ForemanPlugin(short_name=plugin_id, **(plugin or {}))
        print(foreman_plugin.message)
    print()

    print('# [Foreman Proxy](https://github.com/theforeman/smart-proxy)')

    print('## Modules')
    print('| Name | Installer | i18n | RPM | deb | Acceptance |')
    print('|-|-|-|-|-|-|')
    for module_id, module in data['smart_proxy']['modules'].items():
        smart_proxy_module = SmartProxyPlugin(short_name=module_id, **(module or {}))
        print(smart_proxy_module.message)
    print()

    print('## Providers')
    print('| Name | Installer | i18n | RPM | deb | Acceptance |')
    print('|-|-|-|-|-|-|')
    for provider_id, provider in data['smart_proxy']['providers'].items():
        smart_proxy_provider = SmartProxyPlugin(short_name=provider_id, **(provider or {}))
        print(smart_proxy_provider.message)
    print()

    print('# [Foreman Installer](https://github.com/theforeman/foreman-installer)')
    print('## Modules')
    for module_id, module in data['installer']['modules'].items():
        puppet_module = PuppetModule(short_name=module_id, **(module or {}))
        print(f'* [{module_id}]({puppet_module.url})')


if __name__ == '__main__':
    main()
